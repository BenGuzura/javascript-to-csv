Here's how to track who deleted a record using soft deletes. There are a few approaches:

Using a custom column to store the deleter's ID:
php

Copy
// First, add deleted_by column in migration
Schema::create('car_service_repair_items', function (Blueprint $table) {
    $table->id();
    // ... other columns
    $table->softDeletes();
    $table->unsignedBigInteger('deleted_by')->nullable();
    $table->timestamps();
});

// In your model:
class CarServiceRepairItems extends Model
{
    use SoftDeletes;

    protected $fillable = [
        // ... other fields
        'deleted_by'
    ];

    protected static function boot()
    {
        parent::boot();

        static::deleting(function($repairItem) {
            // Get current authenticated user
            $userId = auth()->id();
            
            // Store who deleted the record
            $repairItem->deleted_by = $userId;
            $repairItem->save();

            // Create deletion log
            ActivityLog::create([
                'user_id' => $userId,
                'action' => 'delete',
                'model_type' => 'CarServiceRepairItems',
                'model_id' => $repairItem->id,
                'old_data' => json_encode($repairItem->toArray()),
                'ip_address' => request()->ip(),
                'user_agent' => request()->userAgent()
            ]);
        });
    }

    // Relationship to get deleter information
    public function deletedBy()
    {
        return $this->belongsTo(User::class, 'deleted_by');
    }
}
Using a dedicated activity log table (recommended approach):
php

Copy
// Create migration for activity_logs table
Schema::create('activity_logs', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('user_id')->nullable();
    $table->string('action');
    $table->string('model_type');
    $table->unsignedBigInteger('model_id');
    $table->text('old_data')->nullable();
    $table->text('new_data')->nullable();
    $table->string('ip_address')->nullable();
    $table->string('user_agent')->nullable();
    $table->timestamps();

    $table->foreign('user_id')->references('id')->on('users')->onDelete('set null');
});

// Create ActivityLog model
class ActivityLog extends Model
{
    protected $fillable = [
        'user_id',
        'action',
        'model_type',
        'model_id',
        'old_data',
        'new_data',
        'ip_address',
        'user_agent'
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }
}

// In your CarServiceRepairItems model:
class CarServiceRepairItems extends Model
{
    use SoftDeletes;

    protected static function boot()
    {
        parent::boot();

        // Log creation
        static::created(function($repairItem) {
            self::logActivity('create', $repairItem);
        });

        // Log updates
        static::updated(function($repairItem) {
            self::logActivity('update', $repairItem);
        });

        // Log soft deletes
        static::deleting(function($repairItem) {
            if (!$repairItem->isForceDeleting()) {
                self::logActivity('delete', $repairItem);
            }
        });

        // Log force deletes
        static::forceDeleting(function($repairItem) {
            self::logActivity('force_delete', $repairItem);
        });

        // Log restores
        static::restored(function($repairItem) {
            self::logActivity('restore', $repairItem);
        });
    }

    protected static function logActivity($action, $model)
    {
        ActivityLog::create([
            'user_id' => auth()->id(),
            'action' => $action,
            'model_type' => get_class($model),
            'model_id' => $model->id,
            'old_data' => $action === 'update' ? json_encode($model->getOriginal()) : json_encode($model->toArray()),
            'new_data' => $action === 'update' ? json_encode($model->getChanges()) : null,
            'ip_address' => request()->ip(),
            'user_agent' => request()->userAgent()
        ]);
    }
}
Usage examples:

php

Copy
// Get all logs for a specific repair item
$logs = ActivityLog::where('model_type', CarServiceRepairItems::class)
    ->where('model_id', $repairItem->id)
    ->with('user')  // eager load user relationship
    ->get();

// Get all deletes by a specific user
$userDeletes = ActivityLog::where('user_id', $userId)
    ->where('action', 'delete')
    ->get();

// Get recent deletions
$recentDeletes = ActivityLog::where('action', 'delete')
    ->with('user')
    ->latest()
    ->take(10)
    ->get();

// Display logs
foreach ($logs as $log) {
    echo "Action: {$log->action}\n";
    echo "By User: {$log->user->name}\n";
    echo "At: {$log->created_at}\n";
    echo "IP: {$log->ip_address}\n";
    
    if ($log->action === 'update') {
        $oldData = json_decode($log->old_data, true);
        $newData = json_decode($log->new_data, true);
        // Compare changes
    }
}
Controller example:

php

Copy
class CarServiceRepairItemsController extends Controller
{
    public function destroy($id)
    {
        $repairItem = CarServiceRepairItems::findOrFail($id);
        
        try {
            DB::transaction(function() use ($repairItem) {
                $repairItem->delete();
            });

            return response()->json([
                'success' => true,
                'message' => 'Record deleted successfully'
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to delete record'
            ], 500);
        }
    }

    public function activityLog($id)
    {
        $logs = ActivityLog::where('model_type', CarServiceRepairItems::class)
            ->where('model_id', $id)
            ->with('user')
            ->latest()
            ->paginate(15);

        return view('repair-items.activity-log', compact('logs'));
    }
}
This system:

Tracks all CRUD operations
Stores who performed the action
Keeps old and new values for updates
Records IP address and user agent
Maintains an audit trail
Can be used for recovery or auditing purposes
Would you like me to explain any specific part in more detail?
